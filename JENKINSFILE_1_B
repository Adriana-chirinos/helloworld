pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                // Obtener cÃ³digo del repo
                git branch: 'develop', url: 'https://github.com/Adriana-chirinos/helloworld.git'
            }
        }

        stage('Static') {
            steps {
                bat '''
                    flake8 --max-line-length=100 --exit-zero --format=pylint app>flake8.out 
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Security') {
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}: [{test_id} {msg}"
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true], [threshold: 2, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Start Services') {
            steps {
                bat '''
                    set FLASK_APP=app\\api.py
                    start flask run
                    start java -jar C:\\Unir\\ejercicios\\wiremock\\wiremock-standalone-3.5.4.jar --port 9090 --root-dir test\\wiremock
                '''
                // Pausa mientras se levantan los servicios
                sleep(time: 10, unit: 'SECONDS')
            }
        }

        stage('Cobertura') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, failUnstable: false, conditionalCoverageTargets: '100,90,80', lineCoverageTargets: '100,95,85'
                }
            }
        }

        stage('Parallel Tests and Performance') {
            parallel {
                stage('Test') {
                    steps {
                        // Unidad
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                pip install pytest pytest-cov
                                SET PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-unit.xml --cov=app --cov-report=xml:coverage.xml test/unit
                            '''
                        }
                        // Pausa de 5 segundos
                        sleep(time: 5, unit: 'SECONDS')
                        // Rest
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                    }
                }

                stage('Performance') {
                    steps {
                        bat 'C:\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl'
                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }
    }
}
